{
  
    
        "post0": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://bjchacha.github.io/fastpages/jupyter/2020/03/09/_aban_2020-02-21-introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/03/09/_aban_2020-02-21-introducing-fastpages.html",
            "date": " • Mar 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://bjchacha.github.io/jupyter/2020/03/09/_aban_2020-02-20-test.html",
            "relUrl": "/jupyter/2020/03/09/_aban_2020-02-20-test.html",
            "date": " • Mar 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "使用PlaidML进行GPU模型训练",
            "content": "&#20851;&#20110;PlaidML . PlaidML是Intel的一个AI开发工具，目前支持Keras, ONNX,nGraph。 现在大火的Tensorflow和PyTorch只支持Nvidia的CUDA进行GPU加速计算。 而PlaidML可使用OpenCL进行加速。虽然AMD有自己的加速运算平台ROCm，但目前不支持windows系统，而且OpenCL在速度上貌似还比不上CUDA，对A卡Windows用户（就是我）来说但总比没有的好。 . 本文使用的机器主要配置如下： . E3 1230 v2 | RX 480 | DDR3 1333 4G x2 | . 下面从安装到跑模型，来试试PlaidML的效果如何。 . &#23433;&#35013;PlaidML . 使用pip安装PlaidML: . pip instal plaidml-keras plaidml-setup . 根据提示设置PlaidML。 . &#20351;&#29992;PlaidML&#35757;&#32451;Fashion-MNIST&#20998;&#31867;&#22120; . 首先用tensorflow中的keras跑一下，看看要跑多久。 . # collapse_show # 使用tensorflow.keras(cpu)训练 import tensorflow as tf from time import time data = tf.keras.datasets.fashion_mnist (x_train, y_train), (x_test, y_test) = data.load_data() x_train = x_train.astype(&#39;float32&#39;).reshape(-1, 28, 28, 1) / 255. x_test = x_test.astype(&#39;float32&#39;).reshape(-1, 28, 28, 1) / 255. # print(x_train.shape) model = tf.keras.Sequential([ tf.keras.layers.Conv2D( filters=64, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39;, input_shape=(28, 28, 1) ), tf.keras.layers.MaxPool2D(pool_size=2), tf.keras.layers.Dropout(0.3), tf.keras.layers.Conv2D( filters=32, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39; ), tf.keras.layers.MaxPool2D(pool_size=2), tf.keras.layers.Dropout(0.3), tf.keras.layers.Flatten(), tf.keras.layers.Dense(units=256, activation=&#39;relu&#39;), tf.keras.layers.Dropout(0.5), tf.keras.layers.Dense(units=10, activation=&#39;softmax&#39;)]) model.compile( optimizer=&#39;adam&#39;, loss=tf.keras.losses.sparse_categorical_crossentropy, metrics=[&#39;accuracy&#39;]) train_start = time() model.fit(x_train, y_train, batch_size=64, epochs=10) train_end = time() _, accuracy = model.evaluate(x_test, y_test) print(&#39;training time cost: {0:.1f} s, accuracy: {1:.4f}&#39;.format(train_end-train_start, accuracy)) . . Train on 60000 samples Epoch 1/10 60000/60000 [==============================] - 46s 769us/sample - loss: 0.5855 - accuracy: 0.7840 Epoch 2/10 60000/60000 [==============================] - 46s 758us/sample - loss: 0.4013 - accuracy: 0.8541 Epoch 3/10 60000/60000 [==============================] - 46s 762us/sample - loss: 0.3586 - accuracy: 0.8695 Epoch 4/10 60000/60000 [==============================] - 47s 777us/sample - loss: 0.3357 - accuracy: 0.8769 Epoch 5/10 60000/60000 [==============================] - 47s 778us/sample - loss: 0.3172 - accuracy: 0.8826 Epoch 6/10 60000/60000 [==============================] - 44s 736us/sample - loss: 0.3010 - accuracy: 0.8888 Epoch 7/10 60000/60000 [==============================] - 44s 735us/sample - loss: 0.2867 - accuracy: 0.8940 Epoch 8/10 60000/60000 [==============================] - 44s 736us/sample - loss: 0.2781 - accuracy: 0.8974 Epoch 9/10 60000/60000 [==============================] - 44s 737us/sample - loss: 0.2697 - accuracy: 0.9013 Epoch 10/10 60000/60000 [==============================] - 44s 735us/sample - loss: 0.2631 - accuracy: 0.9033 10000/10000 [==============================] - 2s 201us/sample - loss: 0.2369 - accuracy: 0.9120 training time cost: 451.5 s, accuracy: 0.91 . 现在轮到本文的主角plaidml，展现真正的技术了（不是 . Note: plaidml和tensorflow都有keras，不同的是使用的后端。因此要将keras的后端切换到plaidml，才能确保plaidml正确运行。 . # collapse_show # 更改keras后端 import plaidml.keras plaidml.keras.install_backend() import os os.environ[&#39;KERAS_BACKEND&#39;] = &#39;plaidml.keras.backend&#39; . . . Tip: 如果不想每次都运行上述代码，可在%USERPROFILE% .keras keras.json配置文件中的&quot;backend&quot;设为 &quot;plaidml.keras.backend&quot;. . # collapse_show # 使用plaidml.keras(gpu) 训练 import keras from time import time (x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data() x_train = x_train.astype(&#39;float32&#39;).reshape(-1, 28, 28, 1) x_test = x_test.astype(&#39;float32&#39;).reshape(-1, 28, 28, 1) model = keras.Sequential([ keras.layers.Conv2D( filters=64, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39;, input_shape=(28, 28, 1) ), keras.layers.MaxPool2D(pool_size=2), keras.layers.Dropout(0.3), keras.layers.Conv2D( filters=32, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39; ), keras.layers.MaxPool2D(pool_size=2), keras.layers.Dropout(0.3), keras.layers.Flatten(), keras.layers.Dense(units=256, activation=&#39;relu&#39;), keras.layers.Dropout(0.5), keras.layers.Dense(units=10, activation=&#39;softmax&#39;)]) model.compile( optimizer=&#39;adam&#39;, loss=keras.losses.sparse_categorical_crossentropy, metrics=[&#39;accuracy&#39;]) train_start = time() model.fit(x_train, y_train, batch_size=64, epochs=10) train_end = time() _, accuracy = model.evaluate(x_test, y_test) print(&#39;training time cost: {0:.1f} s, accuracy: {1}&#39;.format(train_end-train_start, accuracy)) . . Using plaidml.keras.backend backend. INFO:plaidml:Opening device &#34;opencl_amd_ellesmere.0&#34; Epoch 1/10 60000/60000 [==============================] - 22s 374us/step - loss: 1.1562 - acc: 0.7010 Epoch 2/10 60000/60000 [==============================] - 12s 193us/step - loss: 0.5358 - acc: 0.8014 Epoch 3/10 60000/60000 [==============================] - 12s 195us/step - loss: 0.4548 - acc: 0.8316 Epoch 4/10 60000/60000 [==============================] - 12s 197us/step - loss: 0.4207 - acc: 0.8457 Epoch 5/10 60000/60000 [==============================] - 11s 185us/step - loss: 0.3989 - acc: 0.8551 Epoch 6/10 60000/60000 [==============================] - 11s 186us/step - loss: 0.3773 - acc: 0.8625 Epoch 7/10 60000/60000 [==============================] - 11s 185us/step - loss: 0.3664 - acc: 0.8651 Epoch 8/10 60000/60000 [==============================] - 11s 187us/step - loss: 0.3551 - acc: 0.8713 Epoch 9/10 60000/60000 [==============================] - 11s 184us/step - loss: 0.3425 - acc: 0.8758 Epoch 10/10 60000/60000 [==============================] - 11s 183us/step - loss: 0.3355 - acc: 0.8763 10000/10000 [==============================] - 5s 473us/step training time cost: 124.2 s, accuracy: 0.8858 . 通过上面两次训练对比看到，CPU训练需要451秒，而通过PlaidML使用GPU训练则只需124秒，大概缩短了1/3的时间，效果还是很明显的。 综上，PlaidML适合没有N卡但坚守Windows，以及MacBook Pro的用户。但有条件还是搞一台N卡主机吧， . &#30058;&#22806;&#65306;&#20026;&#20160;&#20040;&#19981;&#38382;&#38382;&#31070;&#22855;&#30340;Colab&#21602;&#65311; . 不试不知道，试了才知道。上面代码在使用了GPU的Colab下跑，结果输出： . training time cost: 50.0 s, accuracy: 0.9147 最后知道真相的我眼泪流下来，手上PlaidML突然就不香了。 .",
            "url": "https://bjchacha.github.io/plaidml/ai/2020/02/25/plaidml-keras-ai.html",
            "relUrl": "/plaidml/ai/2020/02/25/plaidml-keras-ai.html",
            "date": " • Feb 25, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Vscode Cpp Setting",
            "content": "VSCode用于cpp调试的相关设置 . 0. 前言 . 由于对Cpp的需求比较轻量，用来学习语法和写写算法题之类的，用visual studio觉得十分臃肿。vscode是一款非常优秀的代码编辑器，本身不具备任何编译器等IDE功能。需要进行一定的环境准备才能用vscode进行Cpp代码的编译和调试。 . 1. GCC编译器安装 . 1.下载MinGW-w64，选择最新版本的x86_64-posix-seh。 2.解压下载下来的压缩包，并将mingw64文件夹移动到C盘根目录下（当然也可以到其他地方）。 3.将mingw64文件夹下的bin文件夹目录添加到用户环境变量中的PATH中。此例中则将C: mingw64 bin添加到PATH中。 4.验证gcc编译器安装是否成功：Win+R运行cmd，输入gcc，若提示 . gcc:fatal error: no input files . 则gcc编译器安装成功；若提示： . 不是内部命令或外部命令 . 则gcc没有安装成功，回头检查环境变量中PATH中的目录与gcc实际目录是否符合。 . 2. vscode cpp相关插件 . C/C++：提供Cpp Debug等功能。 | . 3. vscode 相关配置文件 . 在vscode打开Cpp工作区后，会在当前目录下自动生成.vscode文件夹。该文件夹下存放当前工作区的以下配置文件。若无以下文件可自行创建。 . launch.json . { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;(gdb) Launch&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;gdb.exe&quot;, &quot;setupCommands&quot;: [ { &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: false } ], &quot;preLaunchTask&quot;: &quot;Compile&quot;, } ] } . | task.json . { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;Compile&quot;, &quot;command&quot;: &quot;g++&quot;, &quot;args&quot;: [ &quot;${file}&quot;, &quot;-o&quot;, &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;, &quot;-g&quot;, &quot;-Wall&quot;, &quot;-static-libgcc&quot;, &quot;-fexec-charset=GBK&quot; ], &quot;type&quot;: &quot;process&quot;, &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;echo&quot;: true, &quot;reveal&quot;: &quot;always&quot;, &quot;focus&quot;: false, &quot;panel&quot;: &quot;shared&quot;, }, } ] } . | setting.json (部分) . { ... &quot;files.defaultLanguage&quot;: &quot;cpp&quot;, &quot;editor.formatOnType&quot;: true, &quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false, &quot;editor.acceptSuggestionOnEnter&quot;: &quot;off&quot;, &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, &quot;code-runner.runInTerminal&quot;: true, &quot;code-runner.executorMap&quot;: { &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc &#39;$fileName&#39; -o &#39;$fileNameWithoutExt.exe&#39; -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK &amp;&amp; &amp;&#39;$dir$fileNameWithoutExt&#39;&quot;, &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ &#39;$fileName&#39; -o &#39;$fileNameWithoutExt.exe&#39; -Wall -g -O2 -static-libgcc -std=c++17 -fexec-charset=GBK &amp;&amp; &amp;&#39;$dir$fileNameWithoutExt&#39;&quot; }, &quot;code-runner.saveFileBeforeRun&quot;: true, &quot;code-runner.preserveFocus&quot;: true, &quot;code-runner.clearPreviousOutput&quot;: false, &quot;code-runner.ignoreSelection&quot;: true, &quot;C_Cpp.clang_format_sortIncludes&quot;: true, ... } . | . 4. 用vscode进行cpp调试 . 1.在任意目录下创建文件夹cpp。 2.在vscode下Ctrl+K、Ctrl+O，打开cpp文件夹。 3.Ctrl+N创建新文件，随便写个cpp demo: . #include &lt;iostream&gt; using namespace std; int main() { cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; int a; cin &gt;&gt; a; return 0; } . 4.Shift+Ctrl+B进行编译；F5进行调试，会弹出命令行窗口显示hello world输出。至此完成所有设置。 . Footnotes . [^1] 知乎 [^2] vscode官方文档 .",
            "url": "https://bjchacha.github.io/vscode/2020/01/28/vscode-cpp-setting.html",
            "relUrl": "/vscode/2020/01/28/vscode-cpp-setting.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "精灵宝可梦tv&剧场版观看顺序",
            "content": "精灵宝可梦 动画食用方式 . 前言 . 自用，不包括特别篇和其他小剧场。 | 摘自知乎 | . . 无印篇（EP,OP）：Bilibili . 石英联盟： 001（神奇宝贝，就决定是你了！）——054（警犬卡蒂狗） | 剧场版：精灵宝可梦：超梦的逆袭 | 055（按快门的机会是皮卡丘）——080（神奇宝贝联盟最后的战斗） | . | 橘子群岛： 081（真新镇，新的开始）——104（皮卡丘对抗喵喵） | 剧场版：精灵宝可梦：梦幻之宝可梦 洛奇亚爆诞 | 105（喷火龙，就决定是你了！）——116（宿敌大对决，小茂对抗小智） | . | 城都联盟： 117（若叶镇，吹起开启之风的城镇）——155（圈圈熊，吓死人） | 剧场版：精灵宝可梦：结晶塔的帝王 | 156（麒麟奇，超能力神奇宝贝之村）——205（变隐龙在哪里？看不见的神奇宝贝，大混乱！） | 剧场版：精灵宝可梦：雪拉比 穿梭时空的相遇 | 206（讨厌水系神奇宝贝的乔伊！小霞的愤怒！）——256（龙宫道馆，在水中战斗） | 剧场版：精灵宝可梦：水都的守护神 拉帝亚斯与拉帝欧斯 | 257（乘龙之歌！）——274（与皮卡丘分手） | . | . . 超世代（AG）：Bilibili . 丰缘联盟： 001（新的大地！新的冒险！！）——034（最初拿到的宝可梦，大混乱！） | 剧场版：精灵宝可梦：七夜的许愿星 基拉祈 | 035（小遥！初次挑战宝可梦华丽大赛！）——085（茵郁道馆！天空之战！） | 剧场版：精灵宝可梦：裂空的访问者 代欧奇希斯 | 086（喷火驼载着电影来！）——134（月见山！皮宝宝与皮皮与皮可西！） | 剧场版：精灵宝可梦：梦幻与波导的勇者 路卡利欧 | . | 对战开拓区： 135（初阵！对战工厂！！（前篇））——183（长尾怪手与国王！） | 剧场版：精灵宝可梦：宝可梦保育家与苍海的王子 玛纳霏 | 184（聒噪鸟与宝可梦相声！）——192（旅程的终点，以及旅程的开始！） | . | . . 钻石与珍珠：神奥联盟（DP）：Bilibili . 001（出发！双叶镇到真砂镇！）——039（皮卡丘留守记！） | 剧场版：精灵宝可梦：决战时空之塔 帝牙卢卡VS帕路奇犽VS达克莱伊 | 040（冠军·竹兰登场！）——086（缘之时装大会！通往宝可梦风格设计师之路！！） | 剧场版：精灵宝可梦：骑拉帝纳与冰空的花束 洁咪 | 087（路霸可达鸭！）——135（全员参战！宝可梦大胜利！！） | 剧场版：精灵宝可梦：阿尔宙斯 超克的时空 | 136（天冠山的遗迹！银河队的阴谋！！）——183（开幕！神奥联盟・铃兰大会！！） | 剧场版：精灵宝可梦：幻影的霸者 索罗亚克 | 184（神奥联盟第三轮！真司对阿驯！！）——191（回忆是珍珠！友情是钻石！！） | . . 超级愿望（BW）：Bilibili . 合众联盟： 001（前往合众地方！捷克罗姆的身影！！）——039（全体集合！东·乔治对战！！） | 剧场版：精灵宝可梦：比克提尼与黑英雄 捷克罗姆 | 剧场版：精灵宝可梦：比克提尼与白英雄 雷希拉姆 | 040（激战东·乔治对战！藤藤蛇VS驹刀小兵！！）——084（激战立涌道馆！VS霍米加！！（后篇）） | . | 东合众： 085（歌唱吧，美洛耶塔！爱的旋律！！）——087（大岩蛇岛野外求生！！） | 剧场版：精灵宝可梦：酋雷姆VS圣剑士 凯路迪欧 | 088（酒侍侦探天桐！消失的喷嚏熊之谜！！）——108（决战合众联盟！皮卡丘对路卡利欧！！） | . | N章： 109（红豆杉研究所！展开新旅行！！）——122（莱希拉姆对N！理想和真实的那一方!!） | . | Da！章： 123（再见了合众！新的乘船之旅！！）——133（光之飞碟！大宇怪之城！！） | 剧场版：精灵宝可梦：神速的盖诺赛克特 超梦觉醒 | 134（三色堇登场！伞电蜥与坐骑山羊!!）——144（艾莉丝VS小椿！通往龙系大师之路!!） | . | . . XY： . XY：Bilibili 001（抵达卡洛斯地方！梦想与冒险的开始!!）——034（森林拳王！摔角鹰人登场!!） | 剧场版：精灵宝可梦：破坏之茧与蒂安希 | 035（空中对战!?摔角鹰人对烈箭鹰!!）——081（穿越时空的小智！洛托姆的心愿！） | 剧场版：精灵宝可梦：光轮的超魔神 胡帕 | 082（南瓜怪人变装庆典！再见了，南瓜精!?）——093（百刻道馆的双打对战！葛吉花的先知!!） | . | XY&amp;Z：Bilibili 094（Z爆炸诞生！卡洛斯的潜伏者!!）——126（超级蜥蜴王对雷丘！我要学到许多的经验!!） | 剧场版：精灵宝可梦：波尔凯尼恩与机关人偶玛机雅娜 | 127（全面对战的准决赛！小智对翔太!!）——142（最强的二人！希特隆与天桐!!） | . | . . 太阳&amp;月亮：Bilibili . 001（阿罗拉！最初的岛屿、最初的宝可梦们!!）——033（厉害的池塘霸主弱丁鱼！） | 剧场版：精灵宝可梦:就决定是你了! | 034（火焰对战！嘎啦嘎啦现身!!）——081（阿罗拉新的火焰！皇家小智诞生!!） | 剧场版：精灵宝可梦：大家的物语 | 082（跳舞，跳舞进化吗？）——至今 | 待续…… | .",
            "url": "https://bjchacha.github.io/vscode/2019/07/14/%E7%B2%BE%E7%81%B5%E5%AE%9D%E5%8F%AF%E6%A2%A6TV&%E5%89%A7%E5%9C%BA%E7%89%88%E8%A7%82%E7%9C%8B%E9%A1%BA%E5%BA%8F.html",
            "relUrl": "/vscode/2019/07/14/%E7%B2%BE%E7%81%B5%E5%AE%9D%E5%8F%AF%E6%A2%A6TV&%E5%89%A7%E5%9C%BA%E7%89%88%E8%A7%82%E7%9C%8B%E9%A1%BA%E5%BA%8F.html",
            "date": " • Jul 14, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "Windows Great Software Collections",
            "content": "Windows 个人软件收藏集 . Sumatra PDF . 开源的轻量级PDF阅读器 | 适合追求轻量PDF阅读体验的用户 | . Calibre . 本地电子书管理工具 | 适合有kindle或者喜欢看电子书的用户 | . Motrix . 开源、跨平台的下载工具 | 支持下载 HTTP、FTP、BT、磁力链、百度网盘等资源 | 界面简洁 | . Rufus . 开源的可引导USB盘创建工具 | 支持多种系统镜像 | 速度很快 | . Office Tool Pro &amp; Lite . 免费的Office快速部署工具 | 一键下载、安装、激活各种版本Office | KMS地址：kms.loli.best | . QuickLook . 按空格就可以预览文件内容 | 支持大多数格式文件，包括文本、图片、视频、压缩文件等 | 快！方便！ | . Listary . 文件检索系统+启动器 | 支持快捷键启动，启动速度快，搜索速度一流 | 支持常用操作命令，比如百度搜索等 | 免费够用 | 还有很多强大的功能 | . 待续…… .",
            "url": "https://bjchacha.github.io/collections/2018/04/30/windows-great-software-collections.html",
            "relUrl": "/collections/2018/04/30/windows-great-software-collections.html",
            "date": " • Apr 30, 2018"
        }
        
    
  
    
        ,"post6": {
            "title": "Ubuntu Django Deployment",
            "content": "在Ubuntu快速部署Django . 配置环境 . Ubuntu 16.04-64bit | Python 3.5 | Django 2.0.4 | . 第零步 部署准备工作 . 编写requirements.txt文件(根据自身情况编写) . Django==2.0.4 django-pagedown==1.0.4 Markdown==2.6.11 Pygments==2.2.0 . 关闭项目的DEBUG模式 /mysite/mysite/settings.py . ... DEBUG = True # 关闭DEBUG模式 ALLOWED_HOSTS = [&#39;*&#39;] # 允许访问的域名，&#39;*&#39;表示允许所有 LANGUAGE_CODE = &#39;en_us&#39; # Ubuntu中Django不包含中文语言包 TIME_ZONE = &#39;Asia/Shanghai&#39; # 修改时区 . 本示例项目名字为mysite,后面内容请根据自身情况修改 然后把项目和requirements.txt上传到服务器 将项目放在/home,即项目目录为/home/mysite(即manage.py文件所在目录) . . 第一步 更新系统 . sudo apt-get update sudo apt-get upgrade . . 第二步(可选) 安装Python3.6 . sudo apt-get install build-essential checkinstall sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev cd /etc/ wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz sudo tar xzf Python-3.6.4.tgz cd Python-3.6.4 sudo ./configure sudo make altinstall . (可选)最后，进入root，简化后面的部分操作 . 第三步 安装项目依赖项 . pip3 install -r requirements.txt . . 第四步 项目在服务器中初始化 . python manage.py makemigrations python manage.py migrate python manage.py createsuperuser # 若数据库中已有管理员账号则可跳过 python manage.py collectstatic . 测试 . python manage.py runserver 0.0.0.0:80 . 访问公网ip，能显示项目内容，但可能无法显示静态文件内容 杀掉80端口 . fuser -k 80/tcp . . 第五步 安装uWSGI . pip3 install uwsgi . 测试 . uwsgi –http :80 –chdir /home/mysite/ -w mysite.wsgi . 访问公网ip，访问正常则退出并继续 . mkdir -p /etc/uwsgi/sites cd /etc/uwsgi/sites nano mysite.ini . 输入以下内容 . [uwsgi] project = mysite base = /home chdir = %(base)/%(project) module = %(project).wsgi:application master = true processes = 5 socket = %(base)/%(project)/%(project).sock chmod-socket = 666 vacuum = true . . 第六步 安装Nginx . apt-get install nginx nano /etc/nginx/sites-available/mysite . 输入以下内容 . server { listen 80; server_name yourdomain.com; location /static/ { root /home/mysite; } location / { include uwsgi_params; uwsgi_pass unix:/home/mysite/mysite.sock; } } . 其中yourdomain.com改成自己的域名(假设已经完成解析设置) . 链接文件并检测nginx服务器 . ln -s /etc/nginx/sites-available/mysite /etc/nginx/sites-enabled/ service nginx configtest . (可能需要)删除nginx默认模板 . rm -r /etc/nginx/sites-available/default . 第七步 启动服务 . service nginx restart uwsgi /etc/uwsgi/sites/mysite.ini -d /home/mysite/mysite.log . 访问域名，能够正常访问，静态文件也能正常显示 . . 最终步 欢呼吧！ . 来源 .",
            "url": "https://bjchacha.github.io/django/2018/04/30/ubuntu-django-deployment.html",
            "relUrl": "/django/2018/04/30/ubuntu-django-deployment.html",
            "date": " • Apr 30, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "BjChacha . Major: Python . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bjchacha.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}